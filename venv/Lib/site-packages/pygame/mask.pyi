<<<<<<< HEAD
from typing import Any, List, Optional, Sequence, Tuple, Union
=======
from typing import Any, List, Optional, Tuple, Union
>>>>>>> 705f30d050018b014a6053acce19a31da360c7ed

from pygame.rect import Rect
from pygame.surface import Surface

<<<<<<< HEAD
from ._common import ColorValue, Coordinate, RectValue
=======
from pygame.typing import ColorLike, Point, RectLike
>>>>>>> 705f30d050018b014a6053acce19a31da360c7ed

def from_surface(surface: Surface, threshold: int = 127) -> Mask: ...
def from_threshold(
    surface: Surface,
<<<<<<< HEAD
    color: ColorValue,
    threshold: ColorValue = (0, 0, 0, 255),
=======
    color: ColorLike,
    threshold: ColorLike = (0, 0, 0, 255),
>>>>>>> 705f30d050018b014a6053acce19a31da360c7ed
    othersurface: Optional[Surface] = None,
    palette_colors: int = 1,
) -> Mask: ...

class Mask:
<<<<<<< HEAD
    def __init__(self, size: Coordinate, fill: bool = False) -> None: ...
    def __copy__(self) -> Mask: ...
    copy = __copy__
    def get_size(self) -> Tuple[int, int]: ...
    def get_rect(self, **kwargs: Any) -> Rect: ...  # Dict type needs to be completed
    def get_at(self, pos: Coordinate) -> int: ...
    def set_at(self, pos: Coordinate, value: int = 1) -> None: ...
    def overlap(self, other: Mask, offset: Coordinate) -> Optional[Tuple[int, int]]: ...
    def overlap_area(self, other: Mask, offset: Coordinate) -> int: ...
    def overlap_mask(self, other: Mask, offset: Coordinate) -> Mask: ...
    def fill(self) -> None: ...
    def clear(self) -> None: ...
    def invert(self) -> None: ...
    def scale(self, scale: Coordinate) -> Mask: ...
    def draw(self, other: Mask, offset: Coordinate) -> None: ...
    def erase(self, other: Mask, offset: Coordinate) -> None: ...
=======
    def __init__(self, size: Point, fill: bool = False) -> None: ...
    def __copy__(self) -> Mask: ...
    def copy(self) -> Mask: ...
    def get_size(self) -> Tuple[int, int]: ...
    def get_rect(self, **kwargs: Any) -> Rect: ...  # Dict type needs to be completed
    def get_at(self, pos: Point) -> int: ...
    def set_at(self, pos: Point, value: int = 1) -> None: ...
    def overlap(self, other: Mask, offset: Point) -> Optional[Tuple[int, int]]: ...
    def overlap_area(self, other: Mask, offset: Point) -> int: ...
    def overlap_mask(self, other: Mask, offset: Point) -> Mask: ...
    def fill(self) -> None: ...
    def clear(self) -> None: ...
    def invert(self) -> None: ...
    def scale(self, scale: Point) -> Mask: ...
    def draw(self, other: Mask, offset: Point) -> None: ...
    def erase(self, other: Mask, offset: Point) -> None: ...
>>>>>>> 705f30d050018b014a6053acce19a31da360c7ed
    def count(self) -> int: ...
    def centroid(self) -> Tuple[int, int]: ...
    def angle(self) -> float: ...
    def outline(self, every: int = 1) -> List[Tuple[int, int]]: ...
    def convolve(
        self,
        other: Mask,
        output: Optional[Mask] = None,
<<<<<<< HEAD
        offset: Coordinate = (0, 0),
    ) -> Mask: ...
    def connected_component(
        self, pos: Union[Sequence[int], Tuple[int, int]] = ...
    ) -> Mask: ...
    def connected_components(self, minimum: int = 0) -> List[Mask]: ...
    def get_bounding_rects(self) -> Rect: ...
=======
        offset: Point = (0, 0),
    ) -> Mask: ...
    def connected_component(self, pos: Point = ...) -> Mask: ...
    def connected_components(self, minimum: int = 0) -> List[Mask]: ...
    def get_bounding_rects(self) -> List[Rect]: ...
>>>>>>> 705f30d050018b014a6053acce19a31da360c7ed
    def to_surface(
        self,
        surface: Optional[Surface] = None,
        setsurface: Optional[Surface] = None,
        unsetsurface: Optional[Surface] = None,
<<<<<<< HEAD
        setcolor: Optional[ColorValue] = (255, 255, 255, 255),
        unsetcolor: Optional[ColorValue] = (0, 0, 0, 255),
        dest: Union[RectValue, Coordinate] = (0, 0),
=======
        setcolor: Optional[ColorLike] = (255, 255, 255, 255),
        unsetcolor: Optional[ColorLike] = (0, 0, 0, 255),
        dest: Union[RectLike, Point] = (0, 0),
>>>>>>> 705f30d050018b014a6053acce19a31da360c7ed
    ) -> Surface: ...

MaskType = Mask
